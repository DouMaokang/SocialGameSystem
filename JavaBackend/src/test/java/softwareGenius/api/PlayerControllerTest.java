package softwareGenius.api;

import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import softwareGenius.AbstractTest;
import softwareGenius.model.User;

import java.sql.*;

import static org.junit.jupiter.api.Assertions.assertEquals;


public class PlayerControllerTest extends AbstractTest {


    @Override
    @Before
    public void setUp() {
        super.setUp();
    }


    @Test
    public void testAddUser() throws Exception{
        String postUri = "/api/player/addUser";

        // positive test

        // construct a new user object
        User user = new User();
        user.setUserName("Matthew");
        user.setOverallExp(100);
        user.setAccountType("FB");
        user.setRealName("Matthew Deng");
        user.setPassword("password");
        user.setIsAdmin("false");
        user.setEmail("Matthew@gmail.com");

        // map the object to json in string
        String inputJson = super.mapToJson(user);

        // mock post
        MvcResult mvcPostResult = mvc.perform(MockMvcRequestBuilders.post(postUri)
                                .contentType(MediaType.APPLICATION_JSON_VALUE)
                                .content(inputJson)).andReturn();

        // assert response status
        int status = mvcPostResult.getResponse().getStatus();
        assertEquals(200, status);

        // method 1: get the actual user by mock another get request
        String returnedUserId = mvcPostResult.getResponse().getContentAsString();

        // set the autogenerated userId to the original user
        user.setUserId(Integer.parseInt(returnedUserId));

        String getUri = String.format("/api/player/getUser/%s", returnedUserId);
        MvcResult mvcGetResult = mvc.perform(MockMvcRequestBuilders.get(getUri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        String actualUser = mvcGetResult.getResponse().getContentAsString();

        assertEquals(super.mapToJson(user), actualUser);

        // method 2: directly get data through sqlite db driver
        String sql = "select * " +
                        "from user " +
                        "where userId = ?";

        // connect to db and query
        try (Connection conn = this.connect()){
             PreparedStatement pstmt = conn.prepareStatement(sql);
             pstmt.setInt(1, Integer.parseInt(returnedUserId));
             ResultSet result = pstmt.executeQuery();
//             assertEquals(result, inputJson);
             disconnectDB(conn);
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }

        // negative test 1

        // construct a new user object
        User user2 = new User();
        user.setUserName("Matthew");
        user.setOverallExp(10);

        // map the object to json in string
        String inputJson2 = super.mapToJson(user2);

        // mock post
        MvcResult mvcPostResult2 = mvc.perform(MockMvcRequestBuilders.post(postUri)
                .contentType(MediaType.APPLICATION_JSON_VALUE)
                .content(inputJson2)).andReturn();

        // assert response status
        int status2 = mvcPostResult2.getResponse().getStatus();
        assertEquals(400, status2);

        // negative test 2

        // construct a new user object
        User user3 = new User();
        user.setUserName("Matthew");
        user.setOverallExp(10);
        user.setEmail("testing1@test.com");

        // map the object to json in string
        String inputJson3 = super.mapToJson(user3);

        // mock post
        MvcResult mvcPostResult3 = mvc.perform(MockMvcRequestBuilders.post(postUri)
                .contentType(MediaType.APPLICATION_JSON_VALUE)
                .content(inputJson3)).andReturn();

        // assert response status
        int status3 = mvcPostResult3.getResponse().getStatus();
        assertEquals(400, status3);

    }

    @Test
    public void testGetUser() throws Exception{
        //positive test
        int inputUserId = 1;
        String uri = "/api/player/getUser/" + inputUserId;
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        // check status
        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);

        String content = mvcResult.getResponse().getContentAsString();
        // convert json type to class object
        User actualUser = super.mapFromJson(content, User.class);
        assertEquals("testing1@test.com", actualUser.getEmail());

        //negative test
        int inputUserId2 = -1;
        String uri2 = "/api/player/getUser/" + inputUserId2;
        MvcResult mvcResult2 = mvc.perform(MockMvcRequestBuilders.get(uri2)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        // check status
        int status2 = mvcResult2.getResponse().getStatus();
        assertEquals(404, status2);
    }

    @Test
    public void testLogin() throws Exception{
        // positive test
        String uri = "/api/player/login/testing1@test.com/testing1";
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        // check status
        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);

        String actualUserId = mvcResult.getResponse().getContentAsString();
        assertEquals("1", actualUserId);

        // negative test
        String uri2 = "/api/player/login/testing1@test.com/testingytf87";
        MvcResult mvcResult2 = mvc.perform(MockMvcRequestBuilders.get(uri2)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        // check status
        int status2 = mvcResult2.getResponse().getStatus();
        assertEquals(401, status2);
    }

    @Test
    public void testLogout() throws Exception{
        // positive test
        Integer inputUserId = 1;
        String uri = "/api/player/logout/" + inputUserId;
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        // check status
        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);

        String content = mvcResult.getResponse().getContentAsString();
        assertEquals("true", content);

        // negative test
        inputUserId = -1;
        String uri2 = "/api/player/logout/" + inputUserId;

        MvcResult mvcResult2 = mvc.perform(MockMvcRequestBuilders.get(uri2)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        status = mvcResult2.getResponse().getStatus();
        assertEquals(404, status);

    }

    @Test
    public void testGetOverallReport() throws Exception{
        String uri = "/api/getOverallReport";
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        // check status
        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);
    }

    @Test
    public void testGetReport() throws Exception{
        String uri = "/api/player/logout/1";
        MvcResult mvcResult = mvc.perform(MockMvcRequestBuilders.get(uri)
                .accept(MediaType.APPLICATION_JSON_VALUE)).andReturn();

        // check status
        int status = mvcResult.getResponse().getStatus();
        assertEquals(200, status);
    }
}
